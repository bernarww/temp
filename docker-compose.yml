version: '3.8'
services:

  haproxy:
    image: haproxy:lts-alpine3.19
    container_name: haproxy
    restart: unless-stopped
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./haproxy/etc/haproxy:/usr/local/etc/haproxy
      - ./haproxy/run/haproxy:/run/haproxy
    ports:
      - "3000:3000"  #grafana
      - "5540:5540"  #redisinsight
      - "5050:5050"  #pgadmin
      - "8404:8404"  #haproxy health
      - "9000:9000"  #portainer
      - "9001:9001"  #minio_browser
      - "9090:9090"  #prometheus
    networks:
      - mynetwork

  postgres:
    image: postgres:15.0-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mynetwork

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - mynetwork

  redis:
    image: redis:7.0-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis_data:/data:rw
    networks:
      - mynetwork

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    volumes:
      - redisinsight_data:/db
    networks:
      - mynetwork

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
     - minio_data:/data
    command: [ "server", "--console-address", ":9001", "/data" ]
    networks:
      - mynetwork

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    depends_on:
      - minio
    entrypoint: >
     /bin/sh -c "
     /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
     /usr/bin/mc mb --ignore-existing myminio/storage;
     /usr/bin/mc anonymous set download myminio/storage;
     exit 0;
     "
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SERVER_ROOT_URL=${GF_SERVER_ROOT_URL}
    networks:
      - mynetwork

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
    networks:
      - mynetwork

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - mynetwork

  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - mynetwork

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro  # Mount syslog directory
      - ./promtail:/etc/promtail
      - ./promtail:/var/lib/promtail
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - mynetwork

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - mynetwork

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - mynetwork
    privileged: true 

volumes:
  postgres_data: {}
  pgadmin_data: {}
  redis_data: {}
  redisinsight_data: {}
  minio_data: {}
  grafana_data: {}
  prometheus_data: {}
  portainer_data: {}

networks:
  mynetwork:
    name: mynetwork
    driver: bridge